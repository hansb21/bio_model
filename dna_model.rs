struct DNA {
    dna_str: String,
    nuc_a: usize,
    nuc_c: usize,    
    nuc_g: usize,
    nuc_t: usize,
}

impl DNA {
    fn new(dna_string: String) -> DNA {
        DNA { dna_str: dna_string, nuc_a: 0, nuc_c: 0, nuc_g: 0, nuc_t: 0 }

    }
    fn count(&mut self) {
    self.nuc_a = self.dna_str.matches("A").count();    
    self.nuc_c = self.dna_str.matches("C").count();    
    self.nuc_g = self.dna_str.matches("G").count();    
    self.nuc_t = self.dna_str.matches("T").count();    
    }

    fn print_nuc(&self) {
        println!("{} {} {} {}", self.nuc_a,
                                self.nuc_c,
                                self.nuc_g,
                                self.nuc_t);
    }
    fn to_rna(&mut self) -> String {
        self.dna_str.replace("T", "U")

    }

    fn rev_complement(&mut self) -> String {
        
        let reverse_complement: String = self.dna_str.chars().rev()
            .map(|x| match x {
                'A' => 'T',
                'C' => 'G',
                'G' => 'C',
                'T' => 'A',
                _ => todo!()
            }).collect();

        reverse_complement
        
    }
    
}

struct RNA {
    id: usize,
    rna_str: String,
}

impl RNA {

    fn new(id: usize, rna_string: String) -> RNA {
        RNA {id: id, rna_str: rna_string}
    }

    fn to_protein(&mut self) -> String {
        let mut protein = String::from("");
        let mut aux = String::from("");
        for (i, c) in self.rna_str.chars().enumerate() {
            aux.push(c);
            if (i + 1) % 3 == 0 {
                match aux.as_ref() {
                    "UUU" => protein.push('F'),
                    "UUC" => protein.push('F'),
                    "UUA" => protein.push('L'),
                    "UUG" => protein.push('L'),
                    "UCU" => protein.push('S'),
                    "UCC" => protein.push('S'),
                    "UCA" => protein.push('S'),
                    "UCG" => protein.push('S'),
                    "UAU" => protein.push('Y'),
                    "UAC" => protein.push('Y'),
                    "UAA" => protein.push('\n'), //stop
                    "UAG" => protein.push('\n'), //stop
                    "UGU" => protein.push('C'),
                    "UGC" => protein.push('C'),
                    "UGA" => protein.push('\n'), //stop
                    "UGG" => protein.push('W'),
                    "CUU" => protein.push('L'),
                    "CUC" => protein.push('L'),
                    "CUA" => protein.push('L'),
                    "CUG" => protein.push('L'),
                    "CCU" => protein.push('P'),
                    "CCC" => protein.push('P'),
                    "CCA" => protein.push('P'),
                    "CCG" => protein.push('P'),
                    "CAU" => protein.push('H'),
                    "CAC" => protein.push('H'),
                    "CAA" => protein.push('Q'),
                    "CAG" => protein.push('Q'),
                    "CGU" => protein.push('R'),
                    "CGC" => protein.push('R'),
                    "CGA" => protein.push('R'),
                    "CGG" => protein.push('R'),
                    "AUU" => protein.push('I'),
                    "AUC" => protein.push('I'),
                    "AUA" => protein.push('I'),
                    "AUG" => protein.push('M'),
                    "ACU" => protein.push('T'),
                    "ACC" => protein.push('T'),
                    "ACA" => protein.push('T'),
                    "ACG" => protein.push('T'),
                    "AAU" => protein.push('N'),
                    "AAC" => protein.push('N'),
                    "AAA" => protein.push('K'),
                    "AAG" => protein.push('K'),
                    "AGU" => protein.push('S'),
                    "AGC" => protein.push('S'),
                    "AGA" => protein.push('R'),
                    "AGG" => protein.push('R'),
                    "GUU" => protein.push('V'),
                    "GUC" => protein.push('V'),
                    "GUA" => protein.push('V'),
                    "GUG" => protein.push('V'),
                    "GCU" => protein.push('A'),
                    "GCC" => protein.push('A'),
                    "GCA" => protein.push('A'),
                    "GCG" => protein.push('A'),
                    "GAU" => protein.push('D'),
                    "GAC" => protein.push('D'),
                    "GAA" => protein.push('E'),
                    "GAG" => protein.push('E'),
                    "GGU" => protein.push('G'),
                    "GGC" => protein.push('G'),
                    "GGA" => protein.push('G'),
                    "GGG" => protein.push('G'),
                    _ => todo!()
                    }
                aux.clear();  
                }
            }

        protein
    }
}

struct Protein {
    protein_str: String,
}

impl Protein {
    fn new(p_str: String) -> Protein {
        Protein {protein_str: p_str}
    }

    fn total_mrna_protein(&mut self) -> usize {
    0
    }
}

fn main() {
    
    let dna_string = String::from("GCGGTCCACGTCCTCTCTGTCTTGACAGGCGTACATCAGAGTGAAGGGCTCGACGCCAGGTGGTACGTAACCGCAATCAGTCTTTTAGTATTAAACGAAGGGGGGTCTGCGAACGACATTTGGATGCCCCGATTAGAACGCATCCAGCGTGACCTCCAACGTCATTCAGATCTGAACGCGACAGTCCAATTTACAAGGTTCCTCCGCAGGGCGCCACGCTCTTTGTACATTTTCAGTTTTATGGATGATAAAACATACTGTGATAGCTATTGCAGGGGGACCATTCTACGTCGGACTTCCCACTCTTTAGCCACCAACGTTTCGACAACTGAGTTACCTCGTCACCGCAAGCGGTTTCCCTACTGACGGCTTCATACATATACACAAATGCTTTCATTTGTGACGTTTAGTACCCCCTCGTGAGTCGATCAGGATCTGAGTATGGCTGATCCTCTAGCCACTCTAGGCAATAGGAATCAAGACATGGTTCCGCAGATTTGAAGATCCCCTGGGGGCAATTGCTTAGTGTACGGTGGTTACAACGGTAAACGCGGTGAGTGTTGTTGCGCCCTGAGGTACCCGGAGCGCATGCGTCCAACCGTCATACAAGCTCATCTAAGATCAACCTCTCTCGGTAACTTTTGCAGAACAGGACGTTGTGGATTTGAGAGGGTTCACTAACTTAGTCGCTGCCCGACTACTGGCAGGGTATCTCAGGCCCAAATCGTCGGCGTCATCGCATGTTTCGTCGTCCGCACTGTAGTAAGTGAACAGCCCTGGGACAATCTAAGTAATACTAAAAGGGAAATTTCGCGGGTGGACGTTGGGAGACGACACGTCTCCAAGTATTTAGCAGAAT");
    
    let mut dna_sample = DNA::new(dna_string);
    dna_sample.count();
    //dna_sample.print_nuc();
    let rna_str = String::from("AUGAAAUUAGUAGAAGUGUUGUCAACCCGGGAUGAUACGGUAACGAGCUUAGCCUGCACAUAUGGCCGAUGCCUGUCUCUGAACACAUGGCGGGAUAUAACCAUUCGAGAAAAUACUACUUCUAGGAUCGAACAUACAACAAAGUCAACGGUAGAGCGAUCUCCCAAUGACCUCCAGGGAACCGAAGUGGCAGUCGCGAUGUGCGUCUGCUGUUAUGCGUGCGGUGAUCUACGACCAUGUAAAAUUCAAAUGAACGCGAGCAUCCGCUCGUUCAAAAGUUCAGGGCGGCUAAGCGGUCCAGCACAAGCCCAUGGUCGCUUGACGUCCUUAUCGGGUGAGUCAGACUUAUCCCAGGGGCGCGACGUGUUCGUGGCUGAACUCCUUGUAGCAGAAGGGCGGGGCGACCCAGUACUUCUCACCUCCCAUCGUGACCUUUUCAAUGAAUGGAUUAGGGGACAUCAUAUACUACCUCUUGUGGCACGAGGGCCCAGAGUUAGCGCGUCUGGAAAGGUAGGGCUAAUCUGGGACGCAUGCUGCCUUUUGGUCGCGGUACGCCGGACGCGUUAUCUUAAUCUCCACUGCAUACGCGUUAUAUAUAUCAGAAUGGACGCGAUCUCUUGCAUUGAGAGUGUAGGUGACACCAGGCGUCUUGGUAGAUUCAGGUCAGUUUGGAGACGUGGAGUGGGAGAGUGCGCACCCGAUCUUCGAUCCGCAUUAUCCCUAAGACCGAGUGUAAGACUUGGCUAUCGUGCUCUAAACGUAGUGAUCCGCACGGUGGGUAUAUGCGCACUGGGAACUUUUCUUACGCUCCGAGAAUCAAGUUUCAUAAAACCUUACUUGGGGGAACUUGGAUCGCUGGACACGCCUUUCGGGGCGAGGGAGAGUAGUCCUCCUGUCAUCGUAACAUAUGCUCGAGCAUUCUACAGGCUGGACAGUUCUGAACUGGCUAUCGCCGUUACUUACGUACAGGCGCCUUCCCUUUGGGGCCAUUUUACCAGUUAUGGAGAGCUUGCCGCUCCGCAGACAGAGAUAGGGCAAACCAGGUAUGAAAGGCGCUCCAUUAGUACUCAGACAUCUGUCAGAGCUCAUGACAAUCAGAAUACGGUAACAAUCCGAGACAGAUCUGAGUACGGCUACUACCAGAGCCUGGUGACAGACUAUUUUUGCUAUUUCACCGUACAGUCAUUUUAUAAUCAUUGUACAUGCAGGAUUCAGCCAUCCGAUCUUAACUGCCUUUGGGCACGCACAUAUAGGCCAUUGUUUGAAUACACCACGGAAGUAGCUUCAAAGCCCAACGGGCCCUCUGGCGACCCAGUUAGUGCUCGUCCUGUACUAGUAUCGGAUAGCUAUUUUCCCGGCGUCCUAUGGGGGAGCGGAACUCCGCCACCAUUCACUCUAGUGUCAAGACCGAGAAGAAGCAAGAGUGCCCGUCUAUUUCAUGGGCUCCAGUCGUUAAGGCCCACGUCCGGAAGACGCCCGGACUACGGCUCAUUCUUACUUAACUGCGAGGGUAAUACGCACCUAGUCAUAGAAAGUCUGUCCAGUUACCCAGUCGCUUUCGUUCCUCCCCUUCCAGUUACGGGGCGUUCGAGCCCUGCAUUGGAGCCACGCGUCGCCAAUGGUUCUCUGCUUGGUUUCAAUUAUGGACAGAUCGCGACGUCUUUCGGUGGCUGGACUGUUCAAGGCAACAAGUGCCUAAAAACACUCCCGAGGGUAUUCACUUCUGCGGCAGUCAUAGGUCGGGCCGUGUGCUGUGACUUUCUCCGAGCUACCAGUGACCCCUGUCGGCAACUUGGUGCCCCCGGGAACCCUAGACGUACACGACAACUAUUCUUUCCACAAGCCCGCACGCCGCCAAGCCACUCAACCGACAACGACGUUCAGGCAGAGGUAUCCCGAGCGAUUGACGGAGGAAGCCACGCGCAAACUAUCAUUCCAUAUCAAUACCUGGGUUAUCUGGUGCCGUGCCUAGAGACUCGCGGCAUAAGAGUAAUCUCUUCAGUCCACUUCUUCCCAGGAAUGUUUUGGGAAAUGUUGGGGCCAUGGGAAUUCUGUCGAUAUUUUGGUAUGCGGUCUGAGACGUGUUCCUUGGCUCUCCCCUCUAAACGCGAGAACAGAAACUCUAAAGAGCUGCCGAUUGGUGACGAUUCGACGUCAGACCCAUUACCAAAACACUCCAUGCGCACGAGUCACCAAAACCUUCAGCAGGGUUUCAUGCACUUUUCCCGUUGUAAAGAUAUACGUCGGAAGGAUACUGUGAUAGUCUCUCUUGUCAGAAUUUCAGAUCUCCUCCUAGUAGCGCUCUACGACCUGUUCAACCCGGACUGCGUAGACGCCACCUUACGCGUAGGGUGGCGUCAGGUUCCUGUGUAUCAAACUCGAUGCAGAGAAGCUGAAUGGGUACAUCAUAAAGCGGGCGUUUUGGAUCUCAUCCGACGCAACUCUGAAACGCUGUUUAUGGCUCCUACAUACAUCGCUGGGGGGGUCGUUGACGGUACAUAUAACAAGACAUUUCCGAAGGGAAGCACUACUAUUUACUGGGCGACAAAGACCAGUAUGAUACCUGCCGACACAAACUCAAUUACGCGCUCAGUUCUAGAGGAAAAAAGACAUGGUCUAUCCGUGGAAGAAGGGGAAUAUCGUGCAGAUCCAGCAUCCCCCGUUACAGUCGGUUCGAGAACAGCGGAUACGAGAAAGCACAGUGUGCAUUCGUUCAGUGUAACCCGCCAUACAUUCCAUGUGGUGGUCGAUAACUCAUCCGGACAAGGUCUCCCCCCUAGACCGGAAGCUAAGAGCCUAUCGAGAUACCUUUGUCUAAUUAACCCUUUGCAAACCUUAUUGGUCCUGCGCGGUUUAGCUUUCGCAAUUGGGCGUAACGCAAUAUAUAAAGCCAAUCUCACGUUCGGGUGGAUGCACAUGCCGGGCGAUAUCCCGUUACACCAAGUCAAUGCCGAACCAACACACACUAAUGAGAGUGACCGGAUCUGCGUCUUACGCAUAUCCUUAACCUCCACAAUGAAUCGCGUGAUCGAAACGACAAAGAUAGGCGUCAUGGUCGAAAGCCACUUAUUGUUGGCACGCACAUUCUCCCCUCACCGUAAGCAACACACCUCUGCGAAGGUUUCGCAAAUCAUAAAGCAUCGAGCACCCCUCUCAAUCACGACGGCACCGGGCAUAACGCUUCGCGUACAGCCUGACGGCGCAACAUCUGUACUAGGAUCGCGCUGGGAACGCAUCCAAAUAAUGCCAAAAGGCACUUGUGCCUACCGUUACUGCUGGGGUUUCGGAUCCGACCGGACUAGACUCAUAAGAUUUAGCGGAGGGCCCGCGGACCCUGUAACCGUACAUGUCCGUGGACAAUCGUGGACAUGCACGUCUACGCCCGCAUUAGGAAUAUUGAAGCUUCACAUCUCGAUACCCGCUCUUGUAUCUCAGGUAAACAAUUGGAUGGACGUAACGGCCGUGAUCAGCAGCCUAUCCUAUCGCUGGCUUAUGCGCAUUGACACUGCCGGGAGUCACCGCGACCACUUCGAUUUUCUAUCGGGCUUUUGCCCACAUAGCCGGGGCUUGUUACAGGAGUUCCAAAAAGAGGACGUACAACAAAACCGAUCUUGCGAGAACCCAAAGCGGCAAAACUUUGACCAUCUCAGAGCAUGCUACACCUUCUUAGACUCUACUACAGACAAAGGGCGGACUGGACGUAUAUUCCUAGAAAACGCAUGCUGGAUCAAUCAGUCAAACAACGCUGUCGAUCCCUGUCCUUCUGCGACGUCCGCUUAUGUAGACCAAGAUGAAGACUACCCCGGCGAUGUAGUGGCCCCUCCUUCACCUUUCCAUUUCGUGACGCCUGAAUCACGCCGAGCGGAGAGCGCAAUGGGUGGUGUACUUCACAGGAGGCCAACGACGCGAGGCACUGCAACUUGUCCAGCAAAACAGUUGAGGGUAAGCAUGAGAUUACACCAGAUUGACACUUAUUGUGAAUGCAUUGACGUCUUUCGGCGGCUUGAGUAUUCCGCUCUCGACUUCGGGACUCUCAUUGAUUACUCCCCGCUAAGAGCACAGUAUAUACCCCAAGCUCUGACAGCGUAUCACAAGGUAACCUGCUCUCAGAUCCAAUUUAUCACGGAACAGCUUUCCCGCCCUAAUCUUCCGGUAGUCUUAAGUUCCUCUGUACGUUCUCGUGUUUGGUCCGGUUCCUUAUGUGUAUUAGCUAAGGCAAGGGUACUGCAACUUAUUACGCAUCCUCACCGUUUCUCAGUGUGGUUCGUCAGCUACAUAAGACGAUGCAGGCUACACGUUAACAGGGUGGCUUUUCACGGAUCAUUUCUGCAUAGUCUCGUCAAUCGCCCUCCUCGUUCCGAAAUCUUACAUUUGGUACAUCUGAAAUCCGUGGCCAACCUGUUGGGGUAUGAUAUGAUUUCGAGCGCGACCCAACGGCCCGUUGCGAAUUUCAUGACCUAUACAUGUAUGCUCCUCGAAGUCCCGCCAUUUUCACCUAGUCACUAUAAAGAGGUGACGACACUAAAGACCUUGGGCAUCACUGAGGGACGUAACAGUAAGCAGUUUCUGGUUCUCCACUCAGGUACAUGUUCGGUGAUGAUCAGUAUCAGAAUAGGCCAAUUGUAUAUAGUGACCGCCCCCAGUAGGUACAAGGGGGGGACUCGUUCCAAAAUGAGACAUAAUACAGAGACGGCUUCCAGGCUGUAUAAAACUCCUAUUUCUCUCCGUCUGCCAAAAUGCAUGCUCUCGAUAUCCGAAGGGGCAUCCCUAUUCUGCCUCCGCGCCGGUCCCACGAAGCGUACUGGGGAAAUGGACCAGCAACGACGCGGAAGGAUUUCGGCCGGGGGUGCGCGGAGACUAGAAUAUGUGCGGGCCAACCUCGUUUGGACUUCUCUGACAGCGCGUUCGAGCGUCUGCGUCCCAAAACGUCACUUCGGAUGCCGCACGACAGACACAUACAACGUGUCGACUCGUGGCAGCGUUAUUAUCUCCUUGGAUAACGGCGGUAUGGUGCUCCUGGGUCCGGGUCCCCAACGCCGUAUUCAAAUCCGUAGUGCGGCAAUCAGGGGUUCGCCAGAUAGGAAGGCCAUAAGGUACCGCUUAUUACGGAUACGCCUGAGUUUAGAAAUUAUGAGCGGUAUCGCUCAUCUGGGGGGACGGUUCCCGAUCACAGCUCAUCUGUACUCGUCGAGAGAUCCUCUCUUUAAAGAGCCCAACGCUCGAAGGUUAAUGGACGGCACAGUAUUUCAGAUUUCGGUUCACAGGCCGGGAGCUUGUAAAACCCCGAGGUGUGGAGUGCUCGCGCGCGACACAACGUUGCCUCACUCUCAUCUCACACAGGUUAGACGCGACGGGCCUGGAUUCAGAAACAAGCGUGGGGAGAAUUGCUGGGCCAUCUCCGACACGGCAGUCGGCUUAAUAUGUGUGGAUGAAAGCCGGCCAAAUUGUGGACCCGAGGGGUUGGUAGAGAGACGUAACUAUCUCCGGUCACUCGAAUUGGAUCCAUGGGUAUCUGAAACCGUCGUCAAUUGCCCCAAGCUUCUAAACACUCUCAAGAAGUCGAGGGACUGCUACACGGCGAUUGAAGUAUUAUCGUUCAACUCACUUUGCGGGCCCGCCUUGCCACGGUUGUUUGUUGACCGGACUCUCAGGUUUUAUUUAAGUGUGACGCAAACUAAGGAAACUUUGCUGAGGUUUUCGGAAGACGGCUACCGCAGAAGCAAUGGAGCCAAGUGCCCUAAAAUAAAGUGCUGGGAGCGCGGCACAGUUCUUGUGUCUGUUCUAUCUCUCCGGGUACCGAGGUGUUCGUCGAUCAAGCGCGACCUUGAGUACUUUCUCGACCCUGUGAUCGGCUCAGGCGUACCAAACCCGACUCCAACCUACAUUAAACCUCGCUACUUAAUCCGGAACCUUCGAAUUAGAAAACAAGAAUGUCCCUGGGCGGCGCGUUGUGUGGCGCUAGCUCACAGCCCUUUCAAGGCUGAUCUCAGUUGCAGCCCUGGCAGUCGGGUAGGCUAUGCACCAAGGCCACCAACUUUUGGGCGCGUUUUGGGUCGAAAAUUCAUGCGCAUGACAUUAAACUUCCAACAGUAUUGUUUGUGUGACAACCGGUUCGUACUUACGACCCUAAAGGACAUCAGAAAGCUGAGUUUCGUUGCUUUCACGCGAUGGCGGAUAACAUUGGAACAUGGAUUCGUGGACCUCGGGCAUCGCCCAGUCAACCUACAGGCACUUUUCCAAUGCUCGCGAAGUCGUUUGGGCUAUCCGAUUUGCCACAUUUUGGGGGUGCGGAGCCAGCCUUGCUUAAUAUAUUCUUUCUGGAGCAGGGCCGUUGAAAAUGACGUGUCCGGCCCGCUUCCUGAACCAAGUGAGAGUAGCUCACAAACGGCGCAGAAUUACUGUAAUGGUUUGUACGCAGGGUAUGCCAGUCCCUACGUGCGCAUGCCUACUGUAUCACCGGGCCAGGCGUGUGUACGGAGAACUCAUUGUUGUCGAAGUCGGCAUACCAAAAGAUGUGUAUAUGUUGGUCGUGUAUCCCUUAUCCAGUUGCAGGGGUUGUUUGUGGCAAUCACUCUGUCGCUGCAAUGCUAUCCUUCACAUAUGUCGGUUAAGCUGCGUGGAGUUCGGUUUGCUGUAUCUCAUGCACUGGACCGGUGUUCUCAGUGUUCUCCGCCCUCGUGGGUGACAACGCCUGACCAGGACAAUCUGCCUCAAGUCAAGUCUAGCCUCUUUGUGGAACAUGUCGAAAGACUAGUAGGGGAAGUCGGAUUGAAUGGCACGCGUACCUUCACACCGCGCCCCUACGUGCAACGCAAACAACCUCAUCCCUACGUAGUUCAGCAGUGUCUCCUAGUGUCGGGUUCACCCAGUUAUGUGGCCCCACUCGUAGCCUGUGCUGAGGUUUUUUGGUUGGUCCCUUCUCCUGGUAUUAUAAAGCUCGAGGUUCUAACGUUGUAUGGAACUCCAUAUAGCCUAAAAUGCAAGCUGCUGUUCGAGAAAUCGCUAAUUCAAUUGGGGGUUCUUCUUCACCAAAACUGUUUUAAAUCGGUGCGGCGCGCGAACUUGUCAAGCUCUACCGGGGACCCUGUCAGCAUGGUGACACACGGAGUCCCUAUAGGACUCGUGGGUUCCAGCUUGGGCUCAGACCACACCACGUGUGGUAGCCGCUGCCCCGUAAGAUGUGUGCUACGGGUAAAUGUGGAAGCUUUCUGGUACAUAACGGAUGCGUACCGCGAUAGCCUAAUCCGGAACGCUUCGUUGGAGGUCUCGCUGGUUUGUAGACGGGCUCGCACGCGAAUAAUUCAGGAGAUUAUGGCGUCGGUAACCGUUCGAGGGCAGGUUCGGUUAUUGCGUACAUGGCCGCAUGUGCUGUAUGGUGUGAAGGAAAUAUCCUGUGGUUUUCGGGCCAGAAUAGUAGCGCAACGAUUUGCCUUGUUACUGCUCAGAGAUUCACAAACUGAUUUCGUUAGCUCGUGGGAGAUAUACAUUCAAGCAUUGCUAUAUGUAUACCCUAUACAGCUGGUAUGGCAAGGAGGUAAGCUUUCUGGCGCUUACAGUGUACGCGGACGUCGCUGGUAUUGUAAUUCCGGUGUUAUUGUCAACGGGACUCUGCUCUCAGAUGAGGGCCCCCGUAUAUUAGUCACAAGUGUUGCGUCAUUCUCUCGCCUAGAGCUCGGCCAAGAAUCAUUACACUCCCCUACCGUCCGUUCCAGCUUACAAAGAUCUUCGUACACACCCUACUUUGACGAGGCAACGACCUUGGCUUGGCUCUACGCAGAUCUGUCGGAUUGCAUUCUAACGCCUGUUGUACAUGAAGCCGGAACAGGUGAGUUUGGGACACGCCACUUCGUGUCGCUUCUUGAGAUCCACCGGUGUGGUAAAGGCUGCCUGUUAGUACAUGGGCCAUCUCAGCUCUACCAACACGUAAAGGGGACACGCUUCGCACUUGUAGGUUCUGCGCAGCGCUUGAAUGGCUCAUUAACGCAUCAGGAAUUUCAAAUUCCGCAUCGACCACAUGGAUUCUUCGUGUUUUCAGAAGUUCGAUCUUCAAUGGAACGCCUAGAUCCGAACCUUGCCGCUGUGCAGCAAUGCUUACCCGCCGAGCUUUGGACCUCCGAAGAUUAUGAACGUUCAAUAUCCGUCGUCAGUGGAUCGGCGGCGUUAAAUUUCGGUGUAGAAGCGGCGACUAGAUCUAGCCAUGUUUUGAAGUCGUGCACUCUGCAAGGGCUCCGAGGCUCUCAGCUUGAUAAAGAGAGUGCGUCUGCGAAACAAACCACAUUAGGUUUCAAAUUCGUACCCCCUUGCCUUAUCUCUGGUAGCGCGCCAAACCUAAUCGAGCUGACUCACCACAUGCUAGCCUUCAGCCGGAAAGACAGAGGCUCCCGGAAAGAGUCAAUGAAGAACAACCGAACUCCGGCUAUUCGGCAACUAGACGAGGAGUUCAACUCACUACGUCGUAUAUCAGUGGACCCCGUUAGGAGGCUUCUGGCAGCAUCGGGUGUGGUUACAUCUCAGGAAAUCAACUCGUCUCAGCGCAUUUCCAUCUAUUUCAAACCGGCGAGGCAUUCAGACGAUGGAUUACCCGACUUGGCCAUCACGCAGCUUUCUCUUUCUAGUGGAACUCGUAUACCGACAGGAUUUCAUUAUAGCAGACGUACCAGCAAAUUUAAGGUCAGAAUAGCUCGUUCCAUAAGGAAGAUACUGCCGUGUGUCGACACAUGCAGACUAAUCGGCAAAAUGAGUGCACGACACCAUCCAGUCAGCAACGUUGAGUACAGCUCUGACUCGGGGUGGUACCUAUGUUUGCGAGCUAUAUGUAAAAUCCCGCUAAUAUCGUGCCUGGUUAAGGUGGAUCCGGCUAUGAAGAAGCCGACCGUGCCUACUGACUACCGGAAACUGUUGCAGGAGUAUGUAUGUACGAACACACUAAUAUCUCCGGCCCGUGAUGUAUCCAGUUACACGUUUCUGACAGCAAACGUAGGCGACCUGAGUAUCCGAAUUUCUCUGCUCUCUAAACAACACUGUCAAAAGCCAGCCUCAACAUGUAAGAUACGUGUGGCUUAUAUCUCGUUUGCAUGGUCCUCUACAGCGUUCAUCGGCGCGGAGCAUCGUAUCCGCACCCCGAUCGGCAGCACGACAAGCCGAUCAGAGAUACGACAAAUAUCUUCGCACUACGAACCGAGGCUUUACCGAGUGAGUCUGGGGCACAACCGAAGCAAUAACGAAGGCGCUCUGAAUUCAGAAAGGAGUCUAAAAGUGAGUUGGAUGGGCGGGAGAAUUUCUCUGCUUUGUGAAGGAAUGUGUACUUUGCCUGAAUUUCUAGCUGAGGUCCUCGAUAACACGAUUCCGACGCAGCUCCUGGCUGGCGCAAGCGGCACUUUUCUUGCUGCCUCACACGGCCUUGGCGGAGCAGCCUAUCACAAAAAGAGGCCGUGCUGCGUGGACGCACGUCCCGGUGGGGGAGCAUGUACUAGGGAGCGCCGUAUUGUACUUGUGGACAAGCCCGGUACCCCUGCCUGCUUUCGGAGAUGA");
    let mut rna_sample = RNA::new(0, rna_str);
    let protein = rna_sample.to_protein();
    println!("{}", protein);
    let complement = dna_sample.rev_complement();
}

